{
  "workspace": "metrics",
  "last_updated_by": "huydhn@gmail.com",
  "last_updated": "2024-06-03T19:45:25Z",
  "name": "disabled_test_historical",
  "version_count": 6,
  "collections": [
    "commons.issues",
    "common.issues"
  ],
  "latest_version": {
    "workspace": "metrics",
    "created_by": "huydhn@gmail.com",
    "created_by_apikey_name": null,
    "created_at": "2024-06-03T19:45:25Z",
    "name": "disabled_test_historical",
    "version": "5f8764703b63d0c2",
    "description": "Count the number of open disabled tests over time",
    "sql": {
      "query": "--- This query returns the number of new disabled tests (number_of_new_disabled_tests)\n--- and the number of open disabled tests (number_of_open_disabled_tests) daily\nWITH issues_with_labels AS (\n  SELECT\n    i.title,\n    i.body,\n    ARRAY_AGG(labels.value.name) AS labels,\n    i.created_at,\n    i.closed_at\n  FROM\n    commons.issues i,\n    UNNEST (i.labels AS value) AS labels\n  WHERE\n    i.repository_url = CONCAT(\n      'https://api.github.com/repos/',\n      : repo\n    )\n    AND i.title LIKE '%DISABLED%'\n    AND (\n      : platform = ''\n      OR i.body LIKE CONCAT('%', : platform, '%')\n      OR (NOT i.body LIKE '%Platforms: %')\n    )\n  GROUP BY\n    i.title,\n    i.body,\n    i.created_at,\n    i.closed_at\n),\n--- There could be day where there is no new issue or no issue is closed and we want\n--- the count on that day to be 0\nbuckets AS (\n  SELECT\n    DATE_TRUNC(\n      : granularity,\n      CAST(i.created_at AS TIMESTAMP) AT TIME ZONE : timezone\n    ) AS granularity_bucket\n  FROM\n    commons.issues i\n  WHERE\n    i.created_at IS NOT NULL\n  UNION\n  SELECT\n    DATE_TRUNC(\n      : granularity,\n      CAST(i.closed_at AS TIMESTAMP) AT TIME ZONE : timezone\n    ) AS granularity_bucket\n  FROM\n    commons.issues i\n  WHERE\n    i.closed_at IS NOT NULL\n),\n--- Count the newly created disabled tests\nraw_new_disabled_tests AS (\n  SELECT\n    DATE_TRUNC(\n      : granularity,\n      CAST(i.created_at AS TIMESTAMP) AT TIME ZONE : timezone\n    ) AS granularity_bucket,\n    COUNT(i.title) AS number_of_new_disabled_tests,\n  FROM\n    issues_with_labels i\n  WHERE\n    ARRAY_CONTAINS(i.labels, 'skipped')\n    AND (\n      : label = ''\n      OR ARRAY_CONTAINS(i.labels, : label)\n    )\n    AND (\n      : triaged = ''\n      OR (\n        : triaged = 'yes'\n        AND ARRAY_CONTAINS(i.labels, 'triaged')\n      )\n      OR (\n        : triaged = 'no'\n        AND NOT ARRAY_CONTAINS(i.labels, 'triaged')\n      )\n    )\n  GROUP BY\n    granularity_bucket\n),\nnew_disabled_tests AS (\n  SELECT\n    buckets.granularity_bucket,\n    COALESCE(number_of_new_disabled_tests, 0) AS number_of_new_disabled_tests,\n  FROM\n    buckets\n    LEFT JOIN raw_new_disabled_tests ON buckets.granularity_bucket = raw_new_disabled_tests.granularity_bucket\n),\naggregated_new_disabled_tests AS (\n  SELECT\n    granularity_bucket,\n    number_of_new_disabled_tests,\n    SUM(number_of_new_disabled_tests) OVER (\n      ORDER BY\n        granularity_bucket\n    ) AS total_number_of_new_disabled_tests\n  FROM\n    new_disabled_tests\n),\n--- Count the closed disabled tests\nraw_closed_disabled_tests AS (\n  SELECT\n    DATE_TRUNC(\n      : granularity,\n      CAST(i.closed_at AS TIMESTAMP) AT TIME ZONE : timezone\n    ) AS granularity_bucket,\n    COUNT(i.title) AS number_of_closed_disabled_tests,\n  FROM\n    issues_with_labels i\n  WHERE\n    i.closed_at IS NOT NULL\n    AND ARRAY_CONTAINS(i.labels, 'skipped')\n    AND (\n      : label = ''\n      OR ARRAY_CONTAINS(i.labels, : label)\n    )\n    AND (\n      : triaged = ''\n      OR (\n        : triaged = 'yes'\n        AND ARRAY_CONTAINS(i.labels, 'triaged')\n      )\n      OR (\n        : triaged = 'no'\n        AND NOT ARRAY_CONTAINS(i.labels, 'triaged')\n      )\n    )\n  GROUP BY\n    granularity_bucket\n),\nclosed_disabled_tests AS (\n  SELECT\n    buckets.granularity_bucket,\n    COALESCE(\n      number_of_closed_disabled_tests,\n      0\n    ) AS number_of_closed_disabled_tests,\n  FROM\n    buckets\n    LEFT JOIN raw_closed_disabled_tests ON buckets.granularity_bucket = raw_closed_disabled_tests.granularity_bucket\n),\naggregated_closed_disabled_tests AS (\n  SELECT\n    granularity_bucket,\n    number_of_closed_disabled_tests,\n    SUM(\n      number_of_closed_disabled_tests\n    ) OVER (\n      ORDER BY\n        granularity_bucket\n    ) AS total_number_of_closed_disabled_tests\n  FROM\n    closed_disabled_tests\n),\n--- The final aggregated count\naggregated_disabled_tests AS (\n  SELECT\n    FORMAT_ISO8601(\n      aggregated_new_disabled_tests.granularity_bucket\n    ) AS granularity_bucket,\n    number_of_new_disabled_tests,\n    number_of_closed_disabled_tests,\n    total_number_of_new_disabled_tests,\n    total_number_of_closed_disabled_tests,\n    total_number_of_new_disabled_tests - total_number_of_closed_disabled_tests AS number_of_open_disabled_tests\n  FROM\n    aggregated_new_disabled_tests\n    LEFT JOIN aggregated_closed_disabled_tests ON aggregated_new_disabled_tests.granularity_bucket = aggregated_closed_disabled_tests.granularity_bucket\n)\nSELECT\n  *\nFROM\n  aggregated_disabled_tests\nWHERE\n  PARSE_DATETIME_ISO8601(granularity_bucket) >= PARSE_DATETIME_ISO8601(: startTime)\n  AND PARSE_DATETIME_ISO8601(granularity_bucket) < PARSE_DATETIME_ISO8601(: stopTime)\nORDER BY\n  granularity_bucket DESC",
      "default_parameters": [
        {
          "name": "granularity",
          "type": "string",
          "value": "day"
        },
        {
          "name": "label",
          "type": "string",
          "value": ""
        },
        {
          "name": "platform",
          "type": "string",
          "value": ""
        },
        {
          "name": "repo",
          "type": "string",
          "value": "pytorch/pytorch"
        },
        {
          "name": "startTime",
          "type": "string",
          "value": "2023-07-01T00:00:00.000Z"
        },
        {
          "name": "state",
          "type": "string",
          "value": "open"
        },
        {
          "name": "stopTime",
          "type": "string",
          "value": "2023-12-01T00:00:00.000Z"
        },
        {
          "name": "timezone",
          "type": "string",
          "value": "America/Los_Angeles"
        },
        {
          "name": "triaged",
          "type": "string",
          "value": ""
        }
      ]
    },
    "collections": [
      "commons.issues"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": "2024-06-25T16:28:35Z",
      "last_executed_by": "darthsuo@gmail.com",
      "last_execution_error": "2024-06-17T17:23:48Z",
      "last_execution_error_message": "No value specified for query parameter \"startTime\". Please provide a value for this parameter and try again."
    },
    "public_access_id": null
  }
}