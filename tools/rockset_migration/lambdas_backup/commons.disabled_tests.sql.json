{
  "query": "--- This query returns the list of DISABLED tests together with their labels.  This powers\n--- the disabled tests dashboard, contributing them to their owners.\nWITH issues_with_labels AS (\n  SELECT\n    i.number,\n    i.title,\n    i.body,\n    ARRAY_AGG(labels.value.name) AS labels,\n    i.assignee.login AS assignee,\n    i.html_url,\n    i.updated_at,\n  FROM\n    commons.issues i,\n    UNNEST (i.labels AS value) AS labels\n  WHERE\n    (\n      i.state = : state\n      OR : state = ''\n    )\n    AND i.repository_url = CONCAT(\n      'https://api.github.com/repos/',\n      : repo\n    )\n    AND i.title LIKE '%DISABLED%'\n    AND (\n      : platform = ''\n      OR i.body LIKE CONCAT('%', : platform, '%')\n      OR (NOT i.body LIKE '%Platforms: %')\n    )\n  GROUP BY\n    i.number,\n    i.title,\n    i.body,\n    i.assignee.login,\n    i.html_url,\n    i.updated_at\n)\nSELECT\n  *\nFROM\n  issues_with_labels\nWHERE\n  ARRAY_CONTAINS(\n    issues_with_labels.labels, 'skipped'\n  )\n  AND (\n    : label = ''\n    OR ARRAY_CONTAINS(\n      issues_with_labels.labels, : label\n    )\n  )\n  AND (\n    : triaged = ''\n    OR (\n      : triaged = 'yes'\n      AND ARRAY_CONTAINS(\n        issues_with_labels.labels, 'triaged'\n      )\n    )\n    OR (\n      : triaged = 'no'\n      AND NOT ARRAY_CONTAINS(\n        issues_with_labels.labels, 'triaged'\n      )\n    )\n  )\nORDER BY\n  issues_with_labels.updated_at DESC",
  "default_parameters": [
    {
      "name": "label",
      "type": "string",
      "value": ""
    },
    {
      "name": "platform",
      "type": "string",
      "value": ""
    },
    {
      "name": "repo",
      "type": "string",
      "value": "pytorch/pytorch"
    },
    {
      "name": "state",
      "type": "string",
      "value": "open"
    },
    {
      "name": "triaged",
      "type": "string",
      "value": ""
    }
  ]
}