{
  "query": "WITH all_jobs AS (\n  SELECT\n    CONCAT(\n      workflow.name,\n      ' / ',\n      ELEMENT_AT(SPLIT(job.name, ' / '), 1),\n      IF(\n        job.name LIKE '%/%',\n        CONCAT(' / ', ELEMENT_AT(SPLIT(ELEMENT_AT(SPLIT(job.name, ' / '), 2), ', '), 1)),\n        ''\n      )\n    ) AS name,\n    workflow.head_sha,\n    CASE\n      WHEN job.conclusion = 'failure' THEN 0\n      WHEN job.conclusion = 'timed_out' THEN 0\n      WHEN job.conclusion = 'cancelled' THEN 0\n      WHEN job.conclusion IS NULL THEN NULL\n      WHEN job.conclusion = 'skipped' THEN NULL\n      ELSE 1\n    END AS is_green,\n    workflow._event_time AS event_time,\n    ROW_NUMBER() OVER(PARTITION BY job.name, push.head_commit.id ORDER BY job.run_attempt DESC) AS attempt,\nFROM\n  workflow_run workflow\n  INNER JOIN commons.workflow_job job ON workflow.id = job.run_id\n  INNER JOIN push on workflow.head_commit.id = push.head_commit.id\nWHERE\n  job._event_time > CURRENT_TIMESTAMP() - INTERVAL 21 DAY\n  AND ARRAY_CONTAINS(SPLIT(:workflowNames, ','), LOWER(workflow.name))\n  AND workflow.event != 'workflow_run'\n  AND push.ref = 'refs/heads/master'\n  AND push.repository.owner.name = 'pytorch'\n  AND push.repository.name = 'pytorch'\n  AND job.name LIKE '%test%'\n  AND job.name NOT LIKE '%filter%'\n  AND job.name NOT LIKE '%rerun_disabled_tests%'\n)\nSELECT\n  IF (name LIKE '%(%' AND name NOT LIKE '%)%', CONCAT(name, ')'), name) AS name,\n  head_sha,\n  is_green,\n  event_time,\nFROM\n  all_jobs\nWHERE\n  is_green IS NOT NULL\n  AND attempt = 1\nGROUP BY\n  name,\n  head_sha,\n  is_green,\n  event_time\nORDER BY\n  event_time DESC\n",
  "default_parameters": [
    {
      "name": "workflowNames",
      "type": "string",
      "value": "pull,trunk,periodic"
    }
  ]
}