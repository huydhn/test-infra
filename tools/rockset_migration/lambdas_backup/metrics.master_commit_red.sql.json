{
  "query": "with commit_overall_conclusion as (\n    SELECT\n        time,\n        sha,\n        CASE\n            WHEN COUNT_IF(conclusion = 'red') > 0 THEN 'red'\n            WHEN COUNT_IF(conclusion = 'pending') > 0 THEN 'pending'\n            ELSE 'green'\n        END as overall_conclusion\n    FROM\n        (\n            SELECT\n                push._event_time as time,\n                CASE\n                    WHEN job.conclusion = 'failure' THEN 'red'\n                    WHEN job.conclusion = 'timed_out' THEN 'red'\n                    WHEN job.conclusion = 'cancelled' THEN 'red'\n                    WHEN job.conclusion IS NULL THEN 'pending'\n                    ELSE 'green'\n                END as conclusion,\n                push.head_commit.id as sha,\n            FROM\n                commons.workflow_job job\n                JOIN (\n                    commons.workflow_run workflow\n                    JOIN push on workflow.head_commit.id = push.head_commit.id\n                ) on workflow.id = job.run_id HINT(join_strategy = lookup)\n            WHERE\n                job.name != 'ciflow_should_run'\n                AND job.name != 'generate-test-matrix'\n                AND (\n                    -- Limit it to workflows which block viable/strict upgrades\n                    workflow.name in ('Lint', 'pull', 'trunk')\n                    OR workflow.name like 'linux-binary%'\n                )\n                AND job.name NOT LIKE '%rerun_disabled_tests%'\n                AND job.name NOT LIKE '%unstable%'\n                AND workflow.event != 'workflow_run' -- Filter out worflow_run-triggered jobs, which have nothing to do with the SHA\n                AND push.ref IN ('refs/heads/master', 'refs/heads/main')\n                AND push.repository.owner.name = 'pytorch'\n                AND push.repository.name = 'pytorch'\n                AND push._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n                AND push._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n            UNION ALL\n            SELECT\n                push._event_time as time,\n                CASE\n                    WHEN job.job.status = 'failed' THEN 'red'\n                    WHEN job.job.status = 'timed_out' THEN 'red'\n                    WHEN job.job.status = 'canceled' THEN 'red'\n                    WHEN job.job.status IS NULL THEN 'pending'\n                    ELSE 'green'\n                END as conclusion,\n                push.head_commit.id as sha,\n            FROM\n                circleci.job job\n                JOIN push on job.pipeline.vcs.revision = push.head_commit.id\n            WHERE\n                push.ref IN ('refs/heads/master', 'refs/heads/main')\n                AND push.repository.owner.name = 'pytorch'\n                AND push.repository.name = 'pytorch'\n                AND push._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n                AND push._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n        ) as all_job\n    GROUP BY\n        time,\n        sha\n    HAVING\n        COUNT(*) > 10 -- Filter out jobs that didn't run anything.\n    ORDER BY\n        time DESC\n)\nSELECT\n    FORMAT_TIMESTAMP(\n        '%Y-%m-%d',\n        DATE_TRUNC('hour', time),\n        :timezone\n    ) AS granularity_bucket,\n    COUNT_IF(overall_conclusion = 'red') AS red,\n    COUNT_IF(overall_conclusion = 'pending') AS pending,\n    COUNT_IF(overall_conclusion = 'green') AS green,\n    COUNT(*) as total,\nFROM\n    commit_overall_conclusion\nGROUP BY\n    granularity_bucket\nORDER BY\n    granularity_bucket ASC\n",
  "default_parameters": [
    {
      "name": "granularity",
      "type": "string",
      "value": "day"
    },
    {
      "name": "startTime",
      "type": "string",
      "value": "2022-10-12T00:06:32.839Z"
    },
    {
      "name": "stopTime",
      "type": "string",
      "value": "2022-10-21T00:06:32.839Z"
    },
    {
      "name": "timezone",
      "type": "string",
      "value": "America/Los_Angeles"
    }
  ]
}