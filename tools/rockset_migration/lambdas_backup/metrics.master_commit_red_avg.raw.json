{
  "workspace": "metrics",
  "last_updated_by": "csl@fb.com",
  "last_updated": "2024-03-25T23:26:42Z",
  "name": "master_commit_red_avg",
  "version_count": 1,
  "collections": [
    "commons.workflow_job",
    "commons.workflow_run",
    "circleci.job",
    "commons.push"
  ],
  "latest_version": {
    "workspace": "metrics",
    "created_by": "csl@fb.com",
    "created_by_apikey_name": "AKey",
    "created_at": "2024-03-25T23:26:42Z",
    "name": "master_commit_red_avg",
    "version": "5739b387b1262bd8",
    "description": null,
    "sql": {
      "query": "WITH all_jobs AS (\n    SELECT\n        job.conclusion AS conclusion,\n        push.head_commit.id AS sha,\n        ROW_NUMBER() OVER(PARTITION BY job.name, push.head_commit.id ORDER BY job.run_attempt DESC) AS row_num,\n    FROM\n        commons.workflow_job job\n        JOIN (\n            push\n            JOIN commons.workflow_run workflow ON workflow.head_commit.id = push.head_commit.id\n        ) ON workflow.id = job.run_id HINT(join_strategy = lookup)\n    WHERE\n        job.name != 'ciflow_should_run'\n        AND job.name != 'generate-test-matrix'\n        AND ( -- Limit it to workflows which block viable/strict upgrades\n            ARRAY_CONTAINS(SPLIT(:workflowNames, ','), LOWER(workflow.name))\n            OR workflow.name like 'linux-binary%'\n        )\n        AND job.name NOT LIKE '%rerun_disabled_tests%'\n        AND job.name NOT LIKE '%mem_leak_check%'\n        AND job.name NOT LIKE '%unstable%'\n        AND workflow.event != 'workflow_run' -- Filter out worflow_run-triggered jobs, which have nothing to do with the SHA\n        AND push.ref IN ('refs/heads/master', 'refs/heads/main')\n        AND push.repository.owner.name = 'pytorch'\n        AND push.repository.name = 'pytorch'\n        AND push._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n        AND push._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n    UNION ALL\n    SELECT\n        CASE\n            WHEN job.job.status = 'failed' then 'failure'\n            WHEN job.job.status = 'canceled' then 'cancelled'\n            ELSE job.job.status\n        END AS conclusion,\n        push.head_commit.id AS sha,\n        ROW_NUMBER() OVER(PARTITION BY job.name, push.head_commit.id ORDER BY job.run_attempt DESC) AS row_num,\n    FROM\n        circleci.job job\n        JOIN push ON job.pipeline.vcs.revision = push.head_commit.id\n    WHERE\n        push.ref IN ('refs/heads/master', 'refs/heads/main')\n        AND push.repository.owner.name = 'pytorch'\n        AND push.repository.name = 'pytorch'\n        AND push._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n        AND push._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n),\nall_reds AS (\n    SELECT\n        CAST(\n            SUM(\n                CASE\n                    WHEN conclusion = 'failure' THEN 1\n                    WHEN conclusion = 'timed_out' THEN 1\n                    WHEN conclusion = 'cancelled' THEN 1\n                    ELSE 0\n                END\n            ) > 0 AS int\n        ) AS any_red,\n        CAST(\n            SUM(\n                CASE\n                    WHEN conclusion = 'failure' AND row_num = 1 THEN 1\n                    WHEN conclusion = 'timed_out' AND row_num = 1 THEN 1\n                    WHEN conclusion = 'cancelled' AND row_num = 1 THEN 1\n                    ELSE 0\n                END\n            ) > 0 AS int\n        ) AS broken_trunk_red,\n    FROM\n        all_jobs\n    GROUP BY\n        sha\n    HAVING\n        COUNT(sha) > 10 -- Filter out jobs that didn't run anything.\n        AND SUM(IF(conclusion IS NULL, 1, 0)) = 0 -- Filter out commits that still have pending jobs.\n)\nSELECT\n    AVG(broken_trunk_red) AS broken_trunk_red,\n    AVG(any_red) - AVG(broken_trunk_red) AS flaky_red,\nFROM\n    all_reds\n",
      "default_parameters": [
        {
          "name": "startTime",
          "type": "string",
          "value": "2023-03-20T00:00:00.000Z"
        },
        {
          "name": "stopTime",
          "type": "string",
          "value": "2023-03-27T00:00:00.000Z"
        },
        {
          "name": "workflowNames",
          "type": "string",
          "value": "lint,pull,trunk"
        }
      ]
    },
    "collections": [
      "circleci.job",
      "commons.workflow_run",
      "commons.push",
      "commons.workflow_job"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": "2024-06-25T16:28:37Z",
      "last_executed_by": "darthsuo@gmail.com",
      "last_execution_error": "2024-06-17T17:23:48Z",
      "last_execution_error_message": "No value specified for query parameter \"startTime\". Please provide a value for this parameter and try again."
    },
    "public_access_id": null
  }
}