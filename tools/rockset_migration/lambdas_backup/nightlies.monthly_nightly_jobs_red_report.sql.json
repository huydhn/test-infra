{
  "query": "SELECT\n    FORMAT_ISO8601(\n        DATE_TRUNC(:granularity, time)\n    ) AS granularity_bucket,\n    AVG(\n        CASE\n            when conclusion = 'failure' THEN 1\n            when conclusion = 'timed_out' THEN 1\n            when conclusion = 'cancelled' THEN 1\n             when conclusion = 'skipped' THEN 1\n            ELSE 0\n        END\n    ) as red,\nFROM\n    (\n        SELECT\n            job._event_time AT TIME ZONE :timezone as time,\n            job.conclusion as conclusion,\n        FROM\n            commons.workflow_job job\n            JOIN commons.workflow_run workflow on workflow.id = job.run_id\n            JOIN push on workflow.head_commit.id = push.head_commit.id\n        WHERE\n            job.name NOT LIKE '%generate-matrix%'\n            AND job.name NOT LIKE '%unittests%'\n            AND workflow.name NOT IN ('cron', 'Bandit', 'tests', 'Tests')\n            AND push.ref = 'refs/heads/nightly'\n            AND push.repository.owner.name = 'pytorch'\n            AND push.repository.name = :repo\n            AND job._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n            AND job._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n    ) as all_job\nGROUP BY\n    DATE_TRUNC(:granularity, time)\nORDER BY\n    DATE_TRUNC(:granularity, time) ASC\n",
  "default_parameters": [
    {
      "name": "granularity",
      "type": "string",
      "value": "day"
    },
    {
      "name": "repo",
      "type": "string",
      "value": "pytorch"
    },
    {
      "name": "startTime",
      "type": "string",
      "value": "2024-02-01T00:00:38.270Z"
    },
    {
      "name": "stopTime",
      "type": "string",
      "value": "2024-02-29T20:20:38.270Z"
    },
    {
      "name": "timezone",
      "type": "string",
      "value": "America/Los_Angeles"
    }
  ]
}