{
  "workspace": "commons",
  "last_updated_by": "huydhn@gmail.com",
  "last_updated": "2023-06-01T21:37:34Z",
  "name": "master_commit_red_jobs",
  "version_count": 1,
  "collections": [
    "commons.workflow_job",
    "commons.workflow_run",
    "commons.push"
  ],
  "latest_version": {
    "workspace": "commons",
    "created_by": "huydhn@gmail.com",
    "created_by_apikey_name": null,
    "created_at": "2023-06-01T21:37:34Z",
    "name": "master_commit_red_jobs",
    "version": "4869b467679a616a",
    "description": null,
    "sql": {
      "query": "WITH all_jobs AS (\n    SELECT\n        push._event_time AS time,\n        job.conclusion AS conclusion,\n        push.head_commit.id AS sha,\n        push.head_commit.author.username AS author,\n        CONCAT(\n            workflow.name,\n            ' / ',\n            ELEMENT_AT(SPLIT(job.name, ' / '), 1),\n            CONCAT(' / ', ELEMENT_AT(SPLIT(ELEMENT_AT(SPLIT(job.name, ' / '), 2), ', '), 1))\n        ) AS name,\n        (\n            CASE\n                WHEN push.head_commit.author.username = 'pytorchmergebot' THEN push.head_commit.message\n                ELSE NULL\n            END\n        ) AS body,\n    FROM\n        commons.workflow_job job\n        JOIN commons.workflow_run workflow ON workflow.id = job.run_id\n        JOIN push on workflow.head_commit.id = push.head_commit.id\n    WHERE\n        job.name != 'ciflow_should_run'\n        AND job.name != 'generate-test-matrix'\n        AND job.name NOT LIKE '%rerun_disabled_tests%'\n        AND job.name NOT LIKE '%filter%'\n        AND job.name NOT LIKE '%unstable%'\n        AND job.name LIKE '%/%'\n        AND ARRAY_CONTAINS(SPLIT(:workflowNames, ','), LOWER(workflow.name))\n        AND workflow.event != 'workflow_run' -- Filter out worflow_run-triggered jobs, which have nothing to do with the SHA\n        AND push.ref = 'refs/heads/main'\n        AND push.repository.owner.name = 'pytorch'\n        AND push.repository.name = 'pytorch'\n        AND push._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n        AND push._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n),\nfiltered_jobs AS (\n    SELECT\n        time,\n        sha,\n        IF (name LIKE '%(%' AND name NOT LIKE '%)%', CONCAT(name, ')'), name) AS name,\n        CAST(\n            SUM(\n                CASE\n                    WHEN conclusion = 'failure' THEN 1\n                    WHEN conclusion = 'timed_out' THEN 1\n                    WHEN conclusion = 'cancelled' THEN 1\n                    ELSE 0\n                END\n            ) > 0 AS int\n        ) AS any_red,\n        author,\n        body\n    FROM\n        all_jobs\n    GROUP BY\n        time,\n        sha,\n        name,\n        author,\n        body\n    HAVING\n        COUNT(*) >= 1 -- Filter out jobs that didn't run anything.\n        AND SUM(IF(conclusion IS NULL, 1, 0)) = 0 -- Filter out commits that still have pending jobs.\n),\nreds AS (\n    SELECT\n        time,\n        sha,\n        ARRAY_REMOVE(\n            ARRAY_AGG(\n                IF (any_red > 0, name)\n            ),\n            NULL\n        ) AS failures,\n        ARRAY_REMOVE(\n            ARRAY_AGG(\n                IF (any_red = 0, name)\n            ),\n            NULL\n        ) AS successes,\n        author,\n        body\n    FROM\n        filtered_jobs\n    GROUP BY\n        time,\n        sha,\n        author,\n        body\n)\nSELECT\n    time,\n    sha,\n    author,\n    body,\n    failures,\n    successes\nFROM\n    reds\nORDER BY\n    time DESC\n",
      "default_parameters": [
        {
          "name": "startTime",
          "type": "string",
          "value": "2023-04-01T00:00:00.000Z"
        },
        {
          "name": "stopTime",
          "type": "string",
          "value": "2023-05-01T00:00:00.000Z"
        },
        {
          "name": "workflowNames",
          "type": "string",
          "value": "lint,pull,trunk"
        }
      ]
    },
    "collections": [
      "commons.push",
      "commons.workflow_run",
      "commons.workflow_job"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": "2024-06-25T11:51:13Z",
      "last_executed_by": "darthsuo@gmail.com",
      "last_execution_error": "2024-04-21T09:18:02Z",
      "last_execution_error_message": "Query timeout reached. To extend the query timeout, run an async query by setting `async` to true. Otherwise, please upgrade to a larger Virtual Instance or contact Rockset customer support for assistance constructing a more efficient query."
    },
    "public_access_id": null
  }
}