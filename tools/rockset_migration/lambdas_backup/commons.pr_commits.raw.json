{
  "workspace": "commons",
  "last_updated_by": "csl@fb.com",
  "last_updated": "2024-06-07T18:36:41Z",
  "name": "pr_commits",
  "version_count": 1,
  "collections": [
    "commons.workflow_run",
    "commons.push"
  ],
  "latest_version": {
    "workspace": "commons",
    "created_by": "csl@fb.com",
    "created_by_apikey_name": "AKey",
    "created_at": "2024-06-07T18:36:41Z",
    "name": "pr_commits",
    "version": "bbbbdf0c62db15b1",
    "description": "Shows all commits for a PR",
    "sql": {
      "query": "-- This query is used by the HUD's /pull page to populate the list of historical commits\n-- made against a given PR.\n-- This improves upon the default github commits view because it allows HUD to show jobs\n-- that ran on a PR before it was rebased\n\nWITH\n-- Get all PRs that were merged into master, and get all the SHAs for commits from that PR which CI jobs ran against\n-- We need the shas because some jobs (like trunk) don't have a PR they explicitly ran against, but they _were_ run against\n-- a commit from a PR\npr_shas AS (\n  SELECT DISTINCT\n    FORMAT_ISO8601(\n        PARSE_TIMESTAMP_ISO8601(p.head_commit.timestamp),\n        'America/Los_Angeles'\n    ) as timestamp,\n    r.pull_requests[1].number AS pr_number,\n    p.head_commit.id AS sha,\n    p.head_commit.message,\n    CONCAT(\n      'https://github.com/',\n      :owner,\n      '/',\n      :repo,\n      '/pull/',\n      r.pull_requests[1].number\n    ) AS pr_url,\n    p.head_commit.url AS commit_url,\n  FROM\n    commons.push p\n    JOIN commons.workflow_run r ON p.head_commit.id = r.head_sha HINT(join_strategy=lookup)\n  WHERE\n    1 = 1\n    AND LENGTH(r.pull_requests) = 1\n    AND r.repository.owner.login = :owner\n    AND r.pull_requests[1].head.repo.name = :repo\n    AND r.pull_requests[1].number = :pr_num\n\n)\nSELECT\n  *\nFROM\n  pr_shas\nORDER BY timestamp\n",
      "default_parameters": [
        {
          "name": "owner",
          "type": "string",
          "value": "pytorch"
        },
        {
          "name": "pr_num",
          "type": "int",
          "value": "110976"
        },
        {
          "name": "repo",
          "type": "string",
          "value": "pytorch"
        }
      ]
    },
    "collections": [
      "commons.workflow_run",
      "commons.push"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": "2024-06-25T16:31:06Z",
      "last_executed_by": "darthsuo@gmail.com",
      "last_execution_error": "2024-06-25T15:17:36Z",
      "last_execution_error_message": "Query timeout reached. To extend the query timeout, run an async query by setting `async` to true. Otherwise, please upgrade to a larger Virtual Instance or contact Rockset customer support for assistance constructing a more efficient query."
    },
    "public_access_id": null
  }
}