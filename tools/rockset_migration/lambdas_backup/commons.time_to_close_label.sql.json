{
  "query": "-- join data from pull_request_review and pull_request.\n-- We are missing data from before March\nwith pr_data as (\n    select\n        min(\n            PARSE_TIMESTAMP_ISO8601(pr_review.review.submitted_at)\n        ) as reviewed_on,\n        MIN(PARSE_TIMESTAMP_ISO8601(pr.created_at)) as created_at,\n        pr.number as pr_number,\n        case\n            when pr.author_association = 'FIRST_TIME_CONTRIBUTOR'\n            OR pr.author_association = 'CONTRIBUTOR'\n            OR pr.author_association = 'NONE' THEN 'external_user'\n            ELSE 'metamate'\n        END as user_type,\n    from\n        commons.pull_request_review pr_review\n        inner join commons.pull_request pr on pr_review.pull_request.number = pr.number\n    where\n        pr_review.action = 'submitted'\n        and PARSE_TIMESTAMP_ISO8601(pr_review.review.submitted_at) > PARSE_TIMESTAMP_ISO8601(:startTime)\n    group by\n        pr_number,\n        user_type\n),\ndate_diffs as(\n    select\n        created_at,\n        DATE_DIFF('hour', created_at, reviewed_on) /(24.0) as day_diff,\n        pr_number\n    from\n        pr_data\n),\nlabeled_pr as (\n    select\n        test.value.name,\n        p.number,\n        p.head.ref head_ref,\n        p.head.sha,\n        p.base.ref base_ref\n    from\n        commons.pull_request p,\n        unnest(p.labels as value) as test\n    where\n        test.value.name = :label\n    group by\n        p.number,\n        test.value.name,\n        p.head.ref,\n        p.head.sha,\n        p.base.ref\n)\nselect\n    date_trunc('week', created_at) week_bucket,\n    sum(\n        case\n            when day_diff < 2 then 1\n            else 0\n        end\n    ) * 100.0 / count(*) as metric\nfrom\n    date_diffs\n    inner join labeled_pr p on date_diffs.pr_number = p.number\ngroup by\n    week_bucket\norder by\n    week_bucket\n",
  "default_parameters": [
    {
      "name": "label",
      "type": "string",
      "value": "module: docs"
    },
    {
      "name": "startTime",
      "type": "string",
      "value": "2022-01-01T00:00:00.000Z"
    }
  ]
}