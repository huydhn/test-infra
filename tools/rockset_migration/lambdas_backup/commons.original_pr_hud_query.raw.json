{
  "workspace": "commons",
  "last_updated_by": "darthsuo@gmail.com",
  "last_updated": "2022-05-18T17:43:34Z",
  "name": "original_pr_hud_query",
  "version_count": 12,
  "collections": [
    "commons.workflow_job",
    "commons.workflow_run",
    "GitHub-Actions.classification",
    "GitHub-Actions.workflow_job",
    "circleci.job",
    "GitHub-Actions.workflow_run",
    "jenkins.job",
    "commons.pull_request",
    "GitHub-Actions.pull_request",
    "GitHub-Actions.push",
    "commons.push"
  ],
  "latest_version": {
    "workspace": "commons",
    "created_by": "darthsuo@gmail.com",
    "created_by_apikey_name": null,
    "created_at": "2022-05-18T17:43:34Z",
    "name": "original_pr_hud_query",
    "version": "66421c1d823626ad",
    "description": null,
    "sql": {
      "query": "with default_branch_commit as (\n    SELECT\n        commit.timestamp,\n        commit.sha,\n        CAST(commit.pr_num as int) as pr_num\n    from\n        commit\n    where\n        commit.ref = :branch\n        AND commit.repository.owner.name = :owner\n        AND commit.repository.name = :repo\n    ORDER BY\n        commit.timestamp DESC\n    LIMIT\n        50 OFFSET :page * 50\n),\noriginal_pr as (\n    SELECT\n        p.number as number,\n        p.head.sha as pr_head_sha,\n        default_branch_commit.sha as default_branch_commit_sha,\n        default_branch_commit.timestamp as default_branch_commit_time,\n    FROM\n        pull_request p\n        INNER JOIN default_branch_commit on p.number = default_branch_commit.pr_num\n)\nSELECT\n    pr_head_sha,\n    default_branch_commit_sha,\n    CONCAT(workflow_name, ' / ', job_name) as name,\n    id,\n    CASE\n        when conclusion is NULL then 'pending'\n        else conclusion\n    END as conclusion,\n    html_url as htmlUrl,\n    log_url as logUrl,\n    duration_s as durationS,\n    failure_line as failureLine,\n    failure_context as failureContext,\n    failure_captures as failureCaptures,\n    failure_line_number as failureLineNumber,\nfrom\n    (\n        SELECT\n            workflow.head_commit.id as pr_head_sha,\n            original_pr.default_branch_commit_sha as default_branch_commit_sha,\n            job.name as job_name,\n            workflow.name as workflow_name,\n            job.id,\n            job.conclusion,\n            job.html_url,\n            CONCAT(\n                'https://ossci-raw-job-status.s3.amazonaws.com/log/',\n                CAST(job.id as string)\n            ) as log_url,\n            DATE_DIFF(\n                'SECOND',\n                PARSE_TIMESTAMP_ISO8601(job.started_at),\n                PARSE_TIMESTAMP_ISO8601(job.completed_at)\n            ) as duration_s,\n            classification.line as failure_line,\n            classification.context as failure_context,\n            classification.captures as failure_captures,\n            classification.line_num as failure_line_number,\n        FROM\n            workflow_job job\n            JOIN workflow_run workflow on workflow.id = job.run_id\n            INNER JOIN original_pr on workflow.head_commit.id = original_pr.pr_head_sha\n            LEFT JOIN \"GitHub-Actions\".classification ON classification.job_id = job.id\n        WHERE\n            job.name != 'ciflow_should_run'\n            AND job.name != 'generate-test-matrix'\n            AND workflow.event != 'workflow_run' -- Filter out worflow_run-triggered jobs, which have nothing to do with the SHA\n        UNION\n            -- Handle CircleCI\n            -- IMPORTANT: this needs to have the same order as the query above\n        SELECT\n            job.pipeline.vcs.revision,\n            original_pr.default_branch_commit_sha,\n            -- Swap workflow and job name for consistency with GHA naming style.\n            job.workflow.name as job_name,\n            job.job.name as workflow_name,\n            job.job.number as id,\n            case\n                WHEN job.job.status = 'failed' then 'failure'\n                WHEN job.job.status = 'canceled' then 'cancelled'\n                else job.job.status\n            END as conclusion,\n            -- cirleci doesn't provide a url, piece one together out of the info we have\n            CONCAT(\n                'https://app.circleci.com/pipelines/github/pytorch/pytorch/',\n                CAST(job.pipeline.number as string),\n                '/workflows/',\n                job.workflow.id,\n                '/jobs/',\n                CAST(job.job.number AS string)\n            ) as html_url,\n            -- logs aren't downloaded currently, just reuse html_url\n            html_url as log_url,\n            DATE_DIFF(\n                'SECOND',\n                PARSE_TIMESTAMP_ISO8601(job.job.started_at),\n                PARSE_TIMESTAMP_ISO8601(job.job.stopped_at)\n            ) as duration_s,\n            -- Classifications not yet supported\n            null,\n            null,\n            null,\n            null,\n        FROM\n            circleci.job job\n            INNER JOIN original_pr on job.pipeline.vcs.revision = original_pr.pr_head_sha\n    ) as job\n",
      "default_parameters": [
        {
          "name": "branch",
          "type": "string",
          "value": "refs/heads/master"
        },
        {
          "name": "owner",
          "type": "string",
          "value": "pytorch"
        },
        {
          "name": "page",
          "type": "int",
          "value": "0"
        },
        {
          "name": "repo",
          "type": "string",
          "value": "pytorch"
        }
      ]
    },
    "collections": [
      "circleci.job",
      "GitHub-Actions.classification",
      "commons.push",
      "commons.pull_request",
      "commons.workflow_run",
      "commons.workflow_job"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": null,
      "last_executed_by": null,
      "last_execution_error": null,
      "last_execution_error_message": null
    },
    "public_access_id": null
  }
}