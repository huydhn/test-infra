{
  "workspace": "pytorch_dev_infra_kpis",
  "last_updated_by": "zainriz3@gmail.com",
  "last_updated": "2023-06-28T16:28:00Z",
  "name": "force_merge_stats",
  "version_count": 1,
  "collections": [
    "commons.merges",
    "commons.issue_comment"
  ],
  "latest_version": {
    "workspace": "pytorch_dev_infra_kpis",
    "created_by": "zainriz3@gmail.com",
    "created_by_apikey_name": null,
    "created_at": "2023-06-28T16:28:00Z",
    "name": "force_merge_stats",
    "version": "a761a4cd5638ce00",
    "description": "Get stats on how many PRs have been force merged",
    "sql": {
      "query": "WITH \n  issue_comments AS(\n    SELECT\n      issue_comment.user.login,\n      issue_comment.author_association,\n      issue_comment.body,\n      issue_comment.issue_url,\n      issue_comment.html_url,\n      issue_comment.created_at,\n      issue_comment._event_time,\n      CAST(SUBSTR(issue_comment.issue_url, LENGTH('https://api.github.com/repos/pytorch/pytorch/issues/') + 1) as INT) as pr_num\n  FROM\n      commons.issue_comment\n  WHERE\n      (issue_comment.body LIKE '%pytorchbot merge%'\n      OR \n      issue_comment.body LIKE '%pytorchmergebot merge%')\n      -- AND _event_time >= PARSE_DATETIME_ISO8601(:startTime)\n      -- AND _event_time < PARSE_DATETIME_ISO8601(:stopTime)\n      AND issue_comment.user.login NOT LIKE '%pytorch-bot%'\n      AND issue_comment.user.login NOT LIKE '%facebook-github-bot%'\n      AND issue_comment.user.login NOT LIKE '%pytorchmergebot%'\n      AND issue_comment.issue_url LIKE '%https://api.github.com/repos/pytorch/pytorch/issues/%'\n  ),\n  all_merges AS (\n    SELECT DISTINCT\n      m.skip_mandatory_checks,\n      LENGTH(m.failed_checks) AS failed_checks_count,\n      m.ignore_current,\n      m.is_failed,\n      m.pr_num,\n      m.merge_commit_sha,\n      max(c._event_time) as time,\n    FROM\n      commons.merges m inner join issue_comments c on m.pr_num = c.pr_num\n    WHERE\n      m.owner = : owner\n      AND m.project = : project\n      AND m.merge_commit_sha != '' -- only consider successful merges\n      AND m._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n      AND m._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n      -- AND m.pr_num in \n    GROUP BY \n      m.skip_mandatory_checks,\n      m.failed_checks,\n      m.ignore_current,\n      m.is_failed,\n      m.pr_num,\n      m.merge_commit_sha\n  -- and m.pr_num = 104137\n    \n),\nforce_merges_with_failed_checks AS (\n  SELECT\n    IF(\n      (skip_mandatory_checks = true)\n      OR (\n        ignore_current = true\n        AND is_failed = false\n      ),\n      1,\n      0\n    ) AS force_merge,\n    failed_checks_count,\n    pr_num,\n    merge_commit_sha,\n    time,\n  FROM\n    all_merges\n),\nresults as (\n  SELECT\n    pr_num,\n    merge_commit_sha,\n    force_merge,\n    IF(\n      (\n        force_merge = 1\n        AND failed_checks_count > 0\n      ),\n      1,\n      0\n    ) AS force_merge_with_failures,\n    time\n  FROM\n    force_merges_with_failed_checks\n  ),\nstats as (\n  select\n    count(*) as total,\n    sum(force_merge) as total_force_merge_cnt,\n    sum(force_merge_with_failures) as with_failures_cnt,\n    sum(force_merge) - sum(force_merge_with_failures) as impatience_cnt,\n    sum(force_merge_with_failures) * 100 / count(*)  as with_failures_percent,\n    (sum(force_merge) - sum(force_merge_with_failures)) * 100 /  count(*) as impatience_percent\n  from results\n)\nselect * from stats\n-- select * from stats_percentage \n-- Select count(*), pr_num\n--   from results group by pr_num\n  \n-- select * from results -- where pr_num in (102135, 99808)\n--   -- where force_merge = 1\n-- order by pr_num desc\n-- select * from issue_comments",
      "default_parameters": [
        {
          "name": "owner",
          "type": "string",
          "value": "pytorch"
        },
        {
          "name": "project",
          "type": "string",
          "value": "pytorch"
        },
        {
          "name": "startTime",
          "type": "string",
          "value": "2023-06-01T11:00:00.000Z"
        },
        {
          "name": "stopTime",
          "type": "string",
          "value": "2023-07-27T00:00:00.000Z"
        }
      ]
    },
    "collections": [
      "commons.issue_comment",
      "commons.merges"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": null,
      "last_executed_by": null,
      "last_execution_error": null,
      "last_execution_error_message": null
    },
    "public_access_id": null
  }
}