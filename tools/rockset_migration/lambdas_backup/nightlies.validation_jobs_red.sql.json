{
  "query": "with commit_overall_conclusion as (\n    SELECT\n        time,\n        CASE\n            WHEN COUNT_IF(conclusion = 'red') > 0 THEN 'red'\n            WHEN COUNT_IF(conclusion = 'pending') > 0 THEN 'pending'\n            ELSE 'green'\n        END as overall_conclusion\n    FROM\n        (\n            SELECT\n                job._event_time as time,\n                CASE\n                    WHEN job.conclusion = 'failure' THEN 'red'\n                    WHEN job.conclusion = 'timed_out' THEN 'red'\n                    WHEN job.conclusion = 'cancelled' THEN 'red'\n                    WHEN job.conclusion IS NULL THEN 'pending'\n                    ELSE 'green'\n                END as conclusion\n            FROM\n                commons.workflow_job job\n                JOIN commons.workflow_run workflow on workflow.id = job.run_id\n            WHERE\n                job.head_branch = 'main' \n                AND workflow.name = 'cron' \n                AND workflow.event = 'schedule' \n                AND job.name like CONCAT('%',:channel,'%') \n                AND workflow.repository.full_name = 'pytorch/builder' \n                AND job._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n                AND job._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n        ) as all_job\n    GROUP BY\n        time\n    ORDER BY\n        time DESC\n)\nSELECT\n    FORMAT_TIMESTAMP(\n        '%Y-%m-%d',\n        DATE_TRUNC('hour', time),\n        :timezone\n    ) AS granularity_bucket,\n    COUNT_IF(overall_conclusion = 'red') AS red,\n    COUNT_IF(overall_conclusion = 'pending') AS pending,\n    COUNT_IF(overall_conclusion = 'green') AS green,\n    COUNT(*) as total,\nFROM\n    commit_overall_conclusion\nGROUP BY\n    granularity_bucket\nORDER BY\n    granularity_bucket ASC\n\n\n\n",
  "default_parameters": [
    {
      "name": "channel",
      "type": "string",
      "value": "release"
    },
    {
      "name": "granularity",
      "type": "string",
      "value": "day"
    },
    {
      "name": "startTime",
      "type": "string",
      "value": "2023-06-19T00:00:38.270Z"
    },
    {
      "name": "stopTime",
      "type": "string",
      "value": "2023-06-20T20:20:38.270Z"
    },
    {
      "name": "timezone",
      "type": "string",
      "value": "America/Los_Angeles"
    }
  ]
}