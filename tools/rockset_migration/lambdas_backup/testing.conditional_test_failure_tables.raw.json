{
  "workspace": "testing",
  "last_updated_by": "sahanp@meta.com",
  "last_updated": "2023-04-11T23:22:24Z",
  "name": "conditional_test_failure_tables",
  "version_count": 4,
  "collections": [
    "commons.workflow_job",
    "commons.test_run_summary"
  ],
  "latest_version": {
    "workspace": "testing",
    "created_by": "sahanp@meta.com",
    "created_by_apikey_name": null,
    "created_at": "2023-04-11T23:22:24Z",
    "name": "conditional_test_failure_tables",
    "version": "e4610420d42ce31c",
    "description": null,
    "sql": {
      "query": "-- grabs all of the test runs from commons.workflow_jobs and attatches a workflow id to them\n-- we look for the pattern py3.+[0-9,] in the job name to see which python is running, if its not there we exclude it\nWITH test_runs AS (\n  SELECT \n    workflow_job.name AS job_name, \n    workflow_job.conclusion AS conclusion, \n    t.workflow_id AS workflow_id, \n    t.invoking_file AS test_file, \n    t.classname AS test_class, \n    REGEXP_EXTRACT(\n      workflow_job.name, '(py[0-9,]+\\.+[0-9,]+)', \n      1\n    ) as python_version, \n    REGEXP_REPLACE(\n      workflow_job.name, '(py[0-9,]+\\.+[0-9,]+)', \n      '{python_version}'\n    ) as generic_job_name \n  FROM \n    commons.workflow_job \n    INNER JOIN commons.test_run_summary t on workflow_job.id = t.job_id \n  WHERE \n    t._event_time >= PARSE_DATETIME_ISO8601(: startTime) \n    AND t._event_time < PARSE_DATETIME_ISO8601(: stopTime) -- AND test_run_summary.workflow_run_attempt = 1 \n    -- AND workflow_run.head_branch = 'master' \n    AND workflow_job.name LIKE '%-py3.%'\n), \n-- grabs failed tests running on python 3.8\nfailed_py38_tests AS (\n  SELECT \n    job_name, \n    workflow_id, \n    test_file, \n    test_class, \n    python_version, \n    generic_job_name, \n    conclusion \n  FROM \n    test_runs \n  WHERE \n    conclusion = 'failure' \n    AND python_version = 'py3.8'\n), \n-- grabs working tests running on python 3.8\ngood_py38_tests AS (\n  SELECT \n    job_name, \n    workflow_id, \n    test_file, \n    test_class, \n    python_version, \n    generic_job_name, \n    conclusion \n  FROM \n    test_runs \n  WHERE \n    conclusion = 'success' \n    AND python_version = 'py3.8'\n), \n-- grabs tests not running on python 3.8\nnon_py38_tests AS (\n  SELECT \n    job_name, \n    workflow_id, \n    test_file, \n    test_class, \n    python_version, \n    generic_job_name, \n    conclusion \n  FROM \n    test_runs \n  WHERE \n    python_version != 'py3.8'\n), \n-- grabs tests not on python 3.8 and are similar to ones which failed on python 3.8\n-- similarity here is the same job name excluding the python name, test file, test class, and workflow id\nnon_py38_where_py38_worked AS (\n  SELECT \n    non_py38_tests.conclusion as conclusion, \n    non_py38_tests.test_file as test_file, \n    non_py38_tests.test_class as test_class, \n    non_py38_tests.workflow_id as workflow_id, \n    non_py38_tests.generic_job_name as generic_job_name, \n  FROM \n    non_py38_tests \n    INNER JOIN good_py38_tests ON (\n      non_py38_tests.test_file = good_py38_tests.test_file \n      AND non_py38_tests.test_class = good_py38_tests.test_class \n      AND non_py38_tests.generic_job_name = good_py38_tests.generic_job_name \n      AND non_py38_tests.workflow_id = good_py38_tests.workflow_id\n    )\n), \n-- grabs tests not on python 3.8 and are similar to ones which succeeded on python 3.8\n-- similarity here is the same job name excluding the python name, test file, test class, and workflow id\nnon_py38_where_py38_failed AS (\n  SELECT \n    non_py38_tests.conclusion as conclusion, \n    non_py38_tests.test_file as test_file, \n    non_py38_tests.test_class as test_class, \n    non_py38_tests.workflow_id as workflow_id, \n    non_py38_tests.generic_job_name as generic_job_name, \n  FROM \n    non_py38_tests \n    INNER JOIN failed_py38_tests ON (\n      non_py38_tests.test_file = failed_py38_tests.test_file \n      AND non_py38_tests.test_class = failed_py38_tests.test_class \n      AND non_py38_tests.generic_job_name = failed_py38_tests.generic_job_name \n      AND non_py38_tests.workflow_id = failed_py38_tests.workflow_id\n    )\n), \n-- utility aggregation to see how many python versions a job runs on \ntest_aggregates AS (\n  SELECT \n    generic_job_name, \n    COUNT(generic_job_name) AS generic_job_name_count, \n    ARRAY_DISTINCT(\n      ARRAY_AGG(python_version)\n    ) AS python_versions, \n    ARRAY_AGG(conclusion) AS conclusion, \n    workflow_id, \n    test_class, \n    test_file \n  FROM \n    test_runs -- WHERE\n  GROUP BY \n    generic_job_name, \n    workflow_id, \n    test_class, \n    test_file \n  ORDER BY \n    generic_job_name_count DESC\n), \n-- adds python version count to test_aggregates\ntest_aggregates_with_python_version_counts AS (\n  SELECT \n    generic_job_name, \n    generic_job_name_count, \n    python_versions, \n    conclusion, \n    workflow_id, \n    test_class, \n    test_file, \n    LENGTH(python_versions) AS python_version_count \n  FROM \n    test_aggregates\n), \n-- counts the occurences of multiple python versions\npython_version_counts AS (\n  SELECT \n    python_version_count, \n    COUNT(python_version_count) \n  FROM \n    test_aggregates_with_python_version_counts \n  GROUP BY \n    python_version_count\n), \nconditional_prob_given_py38_failure AS (\n  SELECT \n    CAST(\n      COUNT_IF(conclusion = 'success') as float\n    )/ COUNT(*) * 100 as success_percent, \n    CAST(\n      COUNT_IF(conclusion = 'failure') as float\n    )/ COUNT(*) * 100 as failure_percent \n  FROM \n    non_py38_where_py38_failed\n), \nconditional_prob_given_py38_success AS (\n  SELECT \n    CAST(\n      COUNT_IF(conclusion = 'success') as float\n    )/ COUNT(*) * 100 as success_percent, \n    CAST(\n      COUNT_IF(conclusion = 'failure') as float\n    )/ COUNT(*) * 100 as failure_percent \n  FROM \n    non_py38_where_py38_worked\n) \nSELECT \n  * \nFROM \n  python_version_counts\n",
      "default_parameters": [
        {
          "name": "startTime",
          "type": "string",
          "value": "2023-03-02T00:00:00.000Z"
        },
        {
          "name": "stopTime",
          "type": "string",
          "value": "2023-04-03T00:00:00.000Z"
        },
        {
          "name": "workflowName",
          "type": "string",
          "value": "%"
        }
      ]
    },
    "collections": [
      "commons.test_run_summary",
      "commons.workflow_job"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": null,
      "last_executed_by": null,
      "last_execution_error": null,
      "last_execution_error_message": null
    },
    "public_access_id": null
  }
}