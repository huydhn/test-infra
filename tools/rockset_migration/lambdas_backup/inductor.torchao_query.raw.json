{
  "workspace": "inductor",
  "last_updated_by": "xzhao9@meta.com",
  "last_updated": "2024-06-10T16:43:32Z",
  "name": "torchao_query",
  "version_count": 10,
  "collections": [
    "commons.workflow_run",
    "inductor.torchao_perf_stats"
  ],
  "latest_version": {
    "workspace": "inductor",
    "created_by": "xzhao9@meta.com",
    "created_by_apikey_name": null,
    "created_at": "2024-06-10T16:43:32Z",
    "name": "torchao_query",
    "version": "89dd8524b4784c7b",
    "description": "TorchAO Query",
    "sql": {
      "query": "WITH performance_results AS (\n  SELECT\n  name,\n  IF(speedup = 'infra_error', NULL, speedup) AS speedup, -- Handle the recent burst of infra error\n  REPLACE(\n    filename,\n    CONCAT(\n      '_', : dtypes, '_', : mode, '_', : device,\n      '_performance'\n    )\n  ) AS filename,\n  compilation_latency,\n  compression_ratio,\n  abs_latency,\n  mfu,\n  memory_bandwidth,\n  dynamo_peak_mem,\n  eager_peak_mem,\n  workflow_id,\n  CAST(job_id AS INT) AS job_id,\n  FORMAT_ISO8601(\n    DATE_TRUNC(: granularity, _event_time)\n  ) AS granularity_bucket,\n  head_sha,\n  head_branch,\nFROM\n  inductor.torchao_perf_stats\nWHERE\n  filename LIKE '%_performance'\n  AND filename LIKE CONCAT(\n    '%_', : dtypes, '_', : mode, '_', : device,\n    '_%'\n  )\n  AND _event_time >= PARSE_DATETIME_ISO8601(:startTime)\n  AND _event_time < PARSE_DATETIME_ISO8601(:stopTime)\n  AND (workflow_id = :workflowId OR :workflowId = 0)\n),\naccuracy_results AS (\n  SELECT\n    name,\n    accuracy,\n    REPLACE(\n      filename,\n      CONCAT(\n        '_', : dtypes, '_', : mode, '_', : device,\n        '_accuracy'\n      )\n    ) AS filename,\n    workflow_id,\n    CAST(job_id AS INT) AS job_id,\n  FROM\n    inductor.torchao_perf_stats\n  WHERE\n    filename LIKE '%_accuracy'\n    AND filename LIKE CONCAT(\n      '%_', : dtypes, '_', : mode, '_', : device,\n      '_%'\n    )\n    AND _event_time >= PARSE_DATETIME_ISO8601(:startTime)\n    AND _event_time < PARSE_DATETIME_ISO8601(:stopTime)\n    AND (workflow_id = :workflowId OR :workflowId = 0)\n    AND accuracy != 'model_fail_to_load'\n    AND accuracy != 'eager_fail_to_run'\n),\nresults AS (\n  SELECT\n    performance_results.granularity_bucket AS granularity_bucket,\n    performance_results.workflow_id AS workflow_id,\n    performance_results.job_id AS job_id,\n    performance_results.head_branch AS head_branch,\n    performance_results.head_sha AS head_sha,\n    CASE\n      WHEN performance_results.filename LIKE '%_torchbench' THEN 'torchbench'\n      WHEN performance_results.filename LIKE '%_timm_models' THEN 'timm_models'\n      WHEN performance_results.filename LIKE '%_huggingface' THEN 'huggingface'\n      ELSE NULL\n    END AS suite,\n    CASE\n      WHEN performance_results.filename LIKE '%_torchbench' THEN REPLACE(\n        performance_results.filename, '_torchbench'\n      )\n      WHEN performance_results.filename LIKE '%_timm_models' THEN REPLACE(\n        performance_results.filename, '_timm_models'\n      )\n      WHEN performance_results.filename LIKE '%_huggingface' THEN REPLACE(\n        performance_results.filename, '_huggingface'\n      )\n      ELSE NULL\n    END AS compiler,\n    performance_results.name,\n    IF(TRY_CAST(speedup AS FLOAT) IS NOT NULL,\n      CAST(speedup AS FLOAT),\n      0.0\n    ) AS speedup,\n    accuracy_results.accuracy AS accuracy,\n    IF(TRY_CAST(compilation_latency AS FLOAT) IS NOT NULL,\n      CAST(compilation_latency AS FLOAT),\n      0.0\n    ) AS compilation_latency,\n    IF(TRY_CAST(compression_ratio AS FLOAT) IS NOT NULL,\n      CAST(compression_ratio AS FLOAT),\n      0.0\n    ) AS compression_ratio,\n    IF(TRY_CAST(abs_latency AS FLOAT) IS NOT NULL,\n      CAST(abs_latency AS FLOAT),\n      0.0\n    ) AS abs_latency,\n    IF(TRY_CAST(mfu AS FLOAT) IS NOT NULL,\n      CAST(mfu AS FLOAT),\n      0.0\n    ) AS mfu,\n    IF(TRY_CAST(memory_bandwidth AS FLOAT) IS NOT NULL,\n      CAST(memory_bandwidth AS FLOAT),\n      0.0\n    ) AS memory_bandwidth,\n    IF(TRY_CAST(dynamo_peak_mem AS FLOAT) IS NOT NULL,\n      CAST(dynamo_peak_mem AS FLOAT),\n      0.0\n    ) AS dynamo_peak_mem,\n    IF(TRY_CAST(eager_peak_mem AS FLOAT) IS NOT NULL,\n      CAST(eager_peak_mem AS FLOAT),\n      0.0\n    ) AS eager_peak_mem,\n  FROM\n    performance_results\n  LEFT JOIN accuracy_results ON performance_results.name = accuracy_results.name\n    AND performance_results.filename = accuracy_results.filename\n    AND performance_results.workflow_id = accuracy_results.workflow_id\n)\nSELECT DISTINCT\n  results.workflow_id,\n  -- As the JSON response is pretty big, only return the field if it's needed\n  IF(:getJobId, results.job_id, NULL) AS job_id,\n  results.suite,\n  results.compiler,\n  results.name,\n  results.speedup,\n  results.accuracy,\n  results.compilation_latency,\n  results.compression_ratio,\n  results.abs_latency,\n  results.mfu,\n  results.memory_bandwidth,\n  results.dynamo_peak_mem,\n  results.eager_peak_mem,\n  results.granularity_bucket,\nFROM\n  results\nWHERE\n  ARRAY_CONTAINS(SPLIT(:suites, ','), LOWER(results.suite))\n  AND (ARRAY_CONTAINS(SPLIT(:compilers, ','), LOWER(results.compiler)) OR :compilers = '')\n  AND (ARRAY_CONTAINS(SPLIT(:branches, ','), results.head_branch) OR :branches = '')\n  AND (ARRAY_CONTAINS(SPLIT(:commits, ','), results.head_sha) OR :commits = '')\nORDER BY\n  granularity_bucket DESC,\n  workflow_id DESC,\n  suite ASC,\n  compiler ASC,\n  name ASC",
      "default_parameters": [
        {
          "name": "branches",
          "type": "string",
          "value": "main"
        },
        {
          "name": "commits",
          "type": "string",
          "value": ""
        },
        {
          "name": "compilers",
          "type": "string",
          "value": ""
        },
        {
          "name": "device",
          "type": "string",
          "value": "cuda"
        },
        {
          "name": "dtypes",
          "type": "string",
          "value": "bfloat16"
        },
        {
          "name": "getJobId",
          "type": "bool",
          "value": "false"
        },
        {
          "name": "granularity",
          "type": "string",
          "value": "day"
        },
        {
          "name": "mode",
          "type": "string",
          "value": "inference"
        },
        {
          "name": "startTime",
          "type": "string",
          "value": "2024-06-01T00:00:00.00Z"
        },
        {
          "name": "stopTime",
          "type": "string",
          "value": "2024-06-08T00:00:00.00Z"
        },
        {
          "name": "suites",
          "type": "string",
          "value": "torchbench,huggingface,timm_models"
        },
        {
          "name": "timezone",
          "type": "string",
          "value": "America/Los_Angeles"
        },
        {
          "name": "workflowId",
          "type": "int",
          "value": "0"
        }
      ]
    },
    "collections": [
      "inductor.torchao_perf_stats"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": "2024-06-25T08:30:20Z",
      "last_executed_by": "darthsuo@gmail.com",
      "last_execution_error": null,
      "last_execution_error_message": null
    },
    "public_access_id": null
  }
}