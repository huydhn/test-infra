{
  "workspace": "commons",
  "last_updated_by": "huydhn@gmail.com",
  "last_updated": "2023-08-17T03:09:45Z",
  "name": "filter_forced_merge_pr",
  "version_count": 3,
  "collections": [
    "commons.merges"
  ],
  "latest_version": {
    "workspace": "commons",
    "created_by": "huydhn@gmail.com",
    "created_by_apikey_name": null,
    "created_at": "2023-08-17T03:09:45Z",
    "name": "filter_forced_merge_pr",
    "version": "a28350c863e36239",
    "description": "Check if these PRs are forced merge",
    "sql": {
      "query": "-- This query is used by fetchHud to get the force merge status of the pull requests so that\n-- they can be highlighted on HUD. Specifically, force merges with failures are highlighted\n-- with a darker shade of orange while regular force merges due to impatience are marked with\n-- yellow. The logic needs to be in sync with weekly_force_merge_stats query.\nWITH all_merges AS (\n  SELECT\n    skip_mandatory_checks,\n    LENGTH(failed_checks) AS failed_checks_count,\n    LENGTH(ignore_current_checks) AS ignored_checks_count,\n    LENGTH(pending_checks) AS pending_checks_count,\n    ignore_current,\n    is_failed,\n    pr_num,\n    merge_commit_sha,\n  FROM\n    commons.merges\n  WHERE\n    owner = : owner\n    AND project = : project\n    AND ARRAY_CONTAINS(\n      SPLIT(: shas, ','),\n      merge_commit_sha\n    )\n),\n-- A legit force merge needs to satisfy one of the two conditions below:\n-- 1. skip_mandatory_checks is true (-f) and failed_checks_count > 0 (with failures) or pending_checks_count > 0 (impatience).\n--    Under this condition, if a force merge (-f) is done when there is no failure and all jobs have finished, it's arguably\n--    just a regular merge in disguise.\n-- 2. ignore_current is true (-i) and is_failed is false (indicating a successful merge) and ignored_checks_count > 0 (has failures).\n--    As -i still waits for all remaining jobs to finish, this shouldn't be counted toward force merge due to impatience.\n--\n-- If none applies, the merge should be counted as a regular merge regardless of the use of -f or -i. We could track that\n-- (regular merges masquerading as force merges) to understand how devs use (or abuse) these flags, but that's arguably a\n-- different case altogether.\nforce_merges_with_failed_checks AS (\n  SELECT\n    IF(\n      (\n        skip_mandatory_checks = true\n        AND (\n          failed_checks_count > 0\n          OR pending_checks_count > 0\n        )\n      )\n      OR (\n        ignore_current = true\n        AND is_failed = false\n        AND ignored_checks_count > 0 -- if no checks were ignored, it's not a force merge\n        ),\n      1,\n      0\n    ) AS force_merge,\n    failed_checks_count,\n    ignored_checks_count,\n    pr_num,\n    merge_commit_sha,\n  FROM\n    all_merges\n)\nSELECT\n  pr_num,\n  merge_commit_sha,\n  force_merge,\n  IF(\n    (\n      force_merge = 1\n      AND (\n        failed_checks_count > 0\n        OR ignored_checks_count > 0\n      )\n    ),\n    1,\n    0\n  ) AS force_merge_with_failures\nFROM\n  force_merges_with_failed_checks\nWHERE\n  force_merge = 1",
      "default_parameters": [
        {
          "name": "owner",
          "type": "string",
          "value": "pytorch"
        },
        {
          "name": "project",
          "type": "string",
          "value": "pytorch"
        },
        {
          "name": "shas",
          "type": "string",
          "value": "dafa009c3c0198d501fc7bc6cdcc7df14f800852,a0e6f82087af53299c70c09834db42787e750caf,c73923473d4ed0ab08143cb8fe3e8c3f86f2cf73"
        }
      ]
    },
    "collections": [
      "commons.merges"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": "2024-06-25T16:31:09Z",
      "last_executed_by": "darthsuo@gmail.com",
      "last_execution_error": null,
      "last_execution_error_message": null
    },
    "public_access_id": null
  }
}