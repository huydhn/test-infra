{
  "query": "SELECT\n    FORMAT_ISO8601(\n        DATE_TRUNC(:granularity, time)\n    ) AS granularity_bucket,\n    AVG(\n        CASE\n            when conclusion = 'failure' THEN 1\n            when conclusion = 'timed_out' THEN 1\n            when conclusion = 'cancelled' THEN 1\n            ELSE 0\n        END\n    ) as red,\nFROM\n    (\n        SELECT\n            job._event_time AT TIME ZONE :timezone as time,\n            job.conclusion as conclusion,\n        FROM\n            commons.workflow_job job\n            JOIN commons.workflow_run workflow on workflow.id = job.run_id\n            JOIN push on workflow.head_commit.id = push.head_commit.id\n        WHERE\n            job.name != 'ciflow_should_run'\n            AND job.name != 'generate-test-matrix'\n            AND job.name NOT LIKE '%rerun_disabled_tests%'\n            AND job.name NOT LIKE '%unstable%'\n            AND workflow.event != 'workflow_run' -- Filter out worflow_run-triggered jobs, which have nothing to do with the SHA\n            AND push.ref IN ('refs/heads/master', 'refs/heads/main')\n            AND push.repository.owner.name = 'pytorch'\n            AND push.repository.name = 'pytorch'\n            AND job._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n            AND job._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n        UNION ALL\n        SELECT\n            job._event_time AT TIME ZONE :timezone as time,\n            case\n                WHEN job.job.status = 'failed' then 'failure'\n                WHEN job.job.status = 'canceled' then 'cancelled'\n                else job.job.status\n            END as conclusion,\n        FROM\n            circleci.job job\n            JOIN push on job.pipeline.vcs.revision = push.head_commit.id\n        WHERE\n            push.ref IN ('refs/heads/master', 'refs/heads/main')\n            AND push.repository.owner.name = 'pytorch'\n            AND push.repository.name = 'pytorch'\n            AND job._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n            AND job._event_time < PARSE_DATETIME_ISO8601(:stopTime)\n    ) as all_job\nGROUP BY\n    DATE_TRUNC(:granularity, time)\nORDER BY\n    DATE_TRUNC(:granularity, time) ASC\n",
  "default_parameters": [
    {
      "name": "granularity",
      "type": "string",
      "value": "hour"
    },
    {
      "name": "startTime",
      "type": "string",
      "value": "2022-02-09T00:06:32.839Z"
    },
    {
      "name": "stopTime",
      "type": "string",
      "value": "2022-02-16T00:06:32.839Z"
    },
    {
      "name": "timezone",
      "type": "string",
      "value": "America/Los_Angeles"
    }
  ]
}