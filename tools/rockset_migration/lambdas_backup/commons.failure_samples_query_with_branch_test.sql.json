{
  "query": "WITH classifications AS (\n    SELECT\n        c.job_id,\n        c._event_time,\n        c.line,\n        c.line_num,\n        c.context,\n        -- c.captures can be an array or a string type. Make it always be a string\n        CASE\n            IS_SCALAR(c.captures)\n            WHEN true THEN c.captures\n            WHEN false THEN ARRAY_JOIN(c.captures, '\\n')\n        END AS captures,\n    FROM\n        \"GitHub-Actions\".classification c\n    WHERE\n        c._event_time > (CURRENT_TIMESTAMP() - INTERVAL 14 day)\n)\nSELECT\n    job._event_time AS time,\n    w.name AS workflowName,\n    job.name AS jobName,\n    CONCAT(w.name, ' / ', job.name) AS name,\n    w.head_sha AS sha,\n    job.id AS id,\n    w.head_branch as branch,\n    CASE\n        WHEN job.conclusion IS NULL THEN 'pending'\n        ELSE job.conclusion\n    END AS conclusion,\n    job.html_url AS htmlUrl,\n    CONCAT(\n        'https://ossci-raw-job-status.s3.amazonaws.com/log/',\n        CAST(job.id AS string)\n    ) AS logUrl,\n    DATE_DIFF(\n        'SECOND',\n        PARSE_TIMESTAMP_ISO8601(job.started_at),\n        PARSE_TIMESTAMP_ISO8601(job.completed_at)\n    ) AS durationS,\n    c.line AS failureLine,\n    c.line_num AS failureLineNumber,\n    c.context AS failureContext,\n    c.captures AS failureCaptures,\nFROM\n    classifications c\n    JOIN commons.workflow_job job ON job.id = c.job_id\n    JOIN commons.workflow_run w HINT(access_path = column_scan) ON w.id = job.run_id\nWHERE\n    w.head_branch LIKE :branch\n    AND w.repository.full_name = :repo\n    AND c.captures LIKE FORMAT('%{}%', :captures)\nORDER BY\n    c._event_time DESC",
  "default_parameters": [
    {
      "name": "branch",
      "type": "string",
      "value": "%"
    },
    {
      "name": "captures",
      "type": "string",
      "value": "timeout"
    },
    {
      "name": "repo",
      "type": "string",
      "value": "pytorch/pytorch"
    }
  ]
}