{
  "workspace": "pytorch_dev_infra_kpis",
  "last_updated_by": "zainriz3@gmail.com",
  "last_updated": "2023-10-02T16:48:41Z",
  "name": "num_reverts",
  "version_count": 1,
  "collections": [
    "commons.issue_comment",
    "commons.push"
  ],
  "latest_version": {
    "workspace": "pytorch_dev_infra_kpis",
    "created_by": "zainriz3@gmail.com",
    "created_by_apikey_name": null,
    "created_at": "2023-10-02T16:48:41Z",
    "name": "num_reverts",
    "version": "0163bf13629688e6",
    "description": "the count of various revert types over time",
    "sql": {
      "query": "WITH\n    coded_reverts as (\n        SELECT\n            FORMAT_TIMESTAMP(\n                '%Y-%m-%d',\n                DATE_TRUNC(:granularity, ic.created)\n            ) AS bucket,\n            REGEXP_EXTRACT(\n                ic.body,\n                '(-c|--classification)[\\s =]+[\"'']?(\\w+)[\"'']?',\n                2\n            ) AS code,\n            COUNT(*) AS num\n        FROM\n            commons.issue_comment AS ic\n            INNER JOIN (\n                SELECT\n                    issue_comment.issue_url,\n                    MAX(issue_comment.created) AS created -- Use the max for when invalid revert commands are tried first\n                FROM\n                    commons.issue_comment\n                WHERE\n                    REGEXP_LIKE(\n                        issue_comment.body,\n                        ' *@pytorch(merge|)bot revert'\n                    )\n                GROUP BY\n                    issue_comment.issue_url\n            ) AS rc ON ic.issue_url = rc.issue_url\n        WHERE\n            ic.created = rc.created\n            AND ic.created >= PARSE_DATETIME_ISO8601(:startTime)\n            AND ic.created <= PARSE_DATETIME_ISO8601(:stopTime)\n            AND ic.user.login != 'pytorch-bot[bot]'\n            AND REGEXP_EXTRACT(\n                ic.body,\n                '(-c|--classification)[\\s =]+[\"'']?(\\w+)[\"'']?',\n                2\n            ) IS NOT NULL\n        GROUP BY\n            code,\n            bucket\n    ),\n    weekly_results as (\n        (\n            SELECT\n                FORMAT_TIMESTAMP(\n                    '%Y-%m-%d',\n                    DATE_TRUNC(:granularity, push._event_time)\n                ) AS bucket,\n                'total' AS code,\n                COUNT(*) AS num\n            FROM\n                push\n            WHERE\n                push.ref IN ('refs/heads/master', 'refs/heads/main')\n                AND push.repository.owner.name = 'pytorch'\n                AND push.repository.name = 'pytorch'\n                AND (\n                    push.head_commit.message LIKE 'Revert %'\n                    OR push.head_commit.message LIKE 'Back out%'\n                )\n                AND push._event_time >= PARSE_DATETIME_ISO8601(:startTime)\n                AND push._event_time <= PARSE_DATETIME_ISO8601(:stopTime)\n            GROUP BY\n                bucket\n            ORDER BY\n                bucket\n        )\n        UNION\n        (\n            SELECT\n                bucket,\n                code,\n                num\n            FROM\n                coded_reverts\n        )\n        UNION\n        (\n            SELECT\n                bucket,\n                'non-ghfirst-total' AS code,\n                SUM(num)\n            FROM\n                coded_reverts\n            WHERE\n                code != 'ghfirst'\n            GROUP BY\n                bucket\n        )\n    )\nSELECT\n    bucket,\n    -- 2 week rolling average\n    (\n        SUM(num) OVER(\n            PARTITION BY code\n            ORDER BY\n                bucket ROWS 1 PRECEDING\n        )\n    ) / 2.0 AS num,\n    code,\nFROM\n    weekly_results\nORDER BY\n    bucket DESC, code",
      "default_parameters": [
        {
          "name": "granularity",
          "type": "string",
          "value": "week"
        },
        {
          "name": "startTime",
          "type": "string",
          "value": "2022-11-01T00:00:00.000Z"
        },
        {
          "name": "stopTime",
          "type": "string",
          "value": "2023-03-01T00:00:00.000Z"
        }
      ]
    },
    "collections": [
      "commons.issue_comment",
      "commons.push"
    ],
    "state": "ACTIVE",
    "stats": {
      "last_executed": "2024-06-25T13:36:24Z",
      "last_executed_by": "darthsuo@gmail.com",
      "last_execution_error": "2023-12-26T06:04:02Z",
      "last_execution_error_message": "Query timeout reached. To extend the query timeout, run an async query by setting `async` to true. Otherwise, please upgrade to a larger Virtual Instance or contact Rockset customer support for assistance constructing a more efficient query."
    },
    "public_access_id": null
  }
}